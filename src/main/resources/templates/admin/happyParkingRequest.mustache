{{>layout/header}}
<h1>주차장 수정</h1>
<div class="col-md-12">
    <div class="col-md-4">
        <form action="/admin/happyParkingUpdateComplete" method="post">
            <div class="form-group">
                <h3>주차장 이름</h3>
                <input type="text" id="parkingName" name="parkingName" value="{{request.parkingName}}">
            </div><br><br>
            <div id="formWrapper">

            </div>
            <div class="form-group">
                <h3>주차장 타입</h3>
<script id="tmpl" type="x-template">
                <input type="radio" id="s1" name="parkingType" value="단독주택"
                       {{#parkingTypeDefault1}}checked{{/parkingTypeDefault1}}>단독 주택
                <input type="radio" id="s2" name="parkingType" value="개인 사유지"
                       {{#parkingTypeDefault2}}checked{{/parkingTypeDefault2}}>개인 사유지
                <input type="radio" id="s3" name="parkingType" value="공동 주택"
                       {{#parkingTypeDefault3}}checked{{/parkingTypeDefault3}}>공동 주택
                <input type="radio" id="s4" name="parkingType" value="기타"
                       {{#parkingTypeDefault4}}checked{{/parkingTypeDefault4}}>기타
</script>
                <input type="text" id="parkingType" placeholder="asdf" value="{{request.parkingType}}">
            </div><br><br>

            <h3>요금 및 칸</h3>
            <div class="form-group">
                30분당 기본요금<br>
                <input type="text" id="min30Fee" placeholder="예) 800원" name="min30Fee"
                       value="{{request.min30Fee}}"><br><br>
                10분당 추가요금<br>
                <input type="text" id="addMin10Fee" placeholder="예) 300원" name="addMin10Fee"
                       value="{{request.addMin10Fee}}"><br><br>
                주차공간 수<br>
                <input type="text" id="place" placeholder="예)20 대" name="place"
                       value="{{request.place}}"><br><br>
            </div> <br><br>

            <h3>주소</h3>
            <div class="form-group">
                <input type="text" id="sample4_postcode" placeholder="우편번호" name="sample4_postcode"
                       value="{{request.sample4_postcode}}">
                <input type="button" onclick="sample4_execDaumPostcode()" value="주소 찾기"><br>
                <input type="text" id="sample4_roadAddress" placeholder="도로명주소" name="sample4_roadAddress"
                       value="{{request.sample4_roadAddress}}">
                <input type="text" id="sample4_jibunAddress" placeholder="지번주소" name="sample4_jibunAddress"
                       value="{{request.sample4_jibunAddress}}">
                <span id="guide" style="color:#999;display:none"></span>
                <input type="text" id="sample4_detailAddress" placeholder="상세주소" name="sample4_detailAddress"
                       value="{{request.sample4_detailAddress}}">
                <input type="text" id="sample4_extraAddress" placeholder="참고항목" name="sample4_extraAddress"
                       value="{{request.sample4_extraAddress}}">
            </div> <br><br>

            <h3>주차장 운영 시간</h3>
            <div class="form-group">
                평일시간 : <input type="text" id="dayTime" placeholder="09:00 ~ 16:00" name="dayTime"
                              value="{{request.dayTime}}"><br>
                주말시간 : <input type="text" id="weeTime" placeholder="09:00 ~ 16:00" name="weeTime"
                              value="{{request.weeTime}}"><br>
                공휴일시간 : <input type="text" id="holTime" placeholder="09:00 ~ 16:00" name="holTime"
                               value="{{request.holTime}}"><br>
            </div> <br><br>

            <h3>사진</h3>
            <p>충전소 사진을 등록해보세요</p>
            아파트 단지 지도 : <div>올린사진보이는공간1</div><br>
            <input type="hidden" id="aptMap" value="asdf1.png" name="aptMap"
                   value="{{request.aptMap}}">
            주차장 사진 : <div>올린사진보이는공간2</div><br>
            <input type="hidden" id="parkingPic" value="asdf2.png" name="parkingPic"
                   value="{{request.parkingPic}}">
            업로드 넣기

            <button class="btn btn-primary" id="parkingUpdateBtn">등록하기</button>

        </form><br>
        <h2>지도 갱신</h2>
        <br>
        <p>지도를 클릭해주세요!</p>
        <div>
            <form onsubmit="searchPlaces(); return false;">
                키워드 : <input type="text" value="이태원 맛집" id="keyword" size="15">
                <button type="submit">검색하기</button>
            </form>
        </div>
        <div class="map_wrap">
            <div id="map" style="width:100%;height:100%;position:relative;overflow:hidden;"></div>

            <div id="menu_wrap" class="bg_white">
                <div class="option">

                </div>
                <hr>
                <ul id="placesList"></ul>
                <div id="pagination"></div>
            </div>
        </div>
        <div id="clickLatlng"></div>
        <form>
        위도 : <input type="text" id="lat">경도 : <input type="text" id="lng"> <input type="button" id="sendLatLng" value="저장">
        </form>
        <div id="complete"></div>
        <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=f03fad406801abb6cab1b71c79822d1c&libraries=services"></script>
        <script>

            // 마커를 담을 배열입니다
            var markers = [];

            var mapContainer = document.getElementById('map'), // 지도를 표시할 div
                    mapOption = {
                        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
                        level: 3 // 지도의 확대 레벨
                    };

            // 지도를 생성합니다
            var map = new kakao.maps.Map(mapContainer, mapOption);

            // 장소 검색 객체를 생성합니다
            var ps = new kakao.maps.services.Places();

            // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
            var infowindow = new kakao.maps.InfoWindow({zIndex:1});

            // 키워드로 장소를 검색합니다
            searchPlaces();

            // 키워드 검색을 요청하는 함수입니다
            function searchPlaces() {

                var keyword = document.getElementById('keyword').value;

                if (!keyword.replace(/^\s+|\s+$/g, '')) {
                    alert('키워드를 입력해주세요!');
                    return false;
                }

                // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
                ps.keywordSearch( keyword, placesSearchCB);
            }

            // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
            function placesSearchCB(data, status, pagination, asdf) {
                if (status === kakao.maps.services.Status.OK) {

                    // 정상적으로 검색이 완료됐으면
                    // 검색 목록과 마커를 표출합니다
                    displayPlaces(data);
                    displayPlaces(asdf);

                    // 페이지 번호를 표출합니다
                    displayPagination(pagination);

                } else if (status === kakao.maps.services.Status.ZERO_RESULT) {

                    alert('검색 결과가 존재하지 않습니다.');
                    return;

                } else if (status === kakao.maps.services.Status.ERROR) {

                    alert('검색 결과 중 오류가 발생했습니다.');
                    return;

                }
            }

            // 검색 결과 목록과 마커를 표출하는 함수입니다
            function displayPlaces(places) {

                var listEl = document.getElementById('placesList'),
                        menuEl = document.getElementById('menu_wrap'),
                        fragment = document.createDocumentFragment(),
                        bounds = new kakao.maps.LatLngBounds(),
                        listStr = '';

                // 검색 결과 목록에 추가된 항목들을 제거합니다
                removeAllChildNods(listEl);

                // 지도에 표시되고 있는 마커를 제거합니다
                removeMarker();

                for ( var i=0; i<places.length; i++ ) {

                    // 마커를 생성하고 지도에 표시합니다
                    var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
                            marker = addMarker(placePosition, i),
                            itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다

                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
                    // LatLngBounds 객체에 좌표를 추가합니다
                    bounds.extend(placePosition);

                    // 마커와 검색결과 항목에 mouseover 했을때
                    // 해당 장소에 인포윈도우에 장소명을 표시합니다
                    // mouseout 했을 때는 인포윈도우를 닫습니다
                    (function(marker, title) {
                        kakao.maps.event.addListener(marker, 'mouseover', function() {
                            displayInfowindow(marker, title);
                        });

                        kakao.maps.event.addListener(marker, 'mouseout', function() {
                            infowindow.close();
                        });

                        itemEl.onmouseover =  function () {
                            displayInfowindow(marker, title);
                        };

                        itemEl.onmouseout =  function () {
                            infowindow.close();
                        };
                    })(marker, places[i].place_name);

                    fragment.appendChild(itemEl);
                }

                // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다
                listEl.appendChild(fragment);
                menuEl.scrollTop = 0;

                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
                map.setBounds(bounds);
            }

            // 검색결과 항목을 Element로 반환하는 함수입니다
            function getListItem(index, places) {

                var el = document.createElement('li'),
                        itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                                '<div class="info">' +
                                '   <h5>' + places.place_name + '</h5>';

                if (places.road_address_name) {
                    itemStr += '    <span>' + places.road_address_name + '</span>' +
                            '   <span class="jibun gray">' +  places.address_name  + '</span>';
                } else {
                    itemStr += '    <span>' +  places.address_name  + '</span>';
                }

                itemStr += '  <span class="tel">' + places.phone  + '</span>' +
                        '</div>';

                el.innerHTML = itemStr;
                el.className = 'item';

                return el;
            }

            // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
            function addMarker(position, idx, title) {
                var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
                        imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기
                        imgOptions =  {
                            spriteSize : new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
                            spriteOrigin : new kakao.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
                            offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
                        },
                        markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                        marker = new kakao.maps.Marker({
                            position: position, // 마커의 위치
                            image: markerImage
                        });

                marker.setMap(map); // 지도 위에 마커를 표출합니다
                markers.push(marker);  // 배열에 생성된 마커를 추가합니다

                return marker;
            }

            // 지도 위에 표시되고 있는 마커를 모두 제거합니다
            function removeMarker() {
                for ( var i = 0; i < markers.length; i++ ) {
                    markers[i].setMap(null);
                }
                markers = [];
            }

            // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
            function displayPagination(pagination) {
                var paginationEl = document.getElementById('pagination'),
                        fragment = document.createDocumentFragment(),
                        i;

                // 기존에 추가된 페이지번호를 삭제합니다
                while (paginationEl.hasChildNodes()) {
                    paginationEl.removeChild (paginationEl.lastChild);
                }

                for (i=1; i<=pagination.last; i++) {
                    var el = document.createElement('a');
                    el.href = "#";
                    el.innerHTML = i;

                    if (i===pagination.current) {
                        el.className = 'on';
                    } else {
                        el.onclick = (function(i) {
                            return function() {
                                pagination.gotoPage(i);
                            }
                        })(i);
                    }

                    fragment.appendChild(el);
                }
                paginationEl.appendChild(fragment);
            }

            // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
            // 인포윈도우에 장소명을 표시합니다
            function displayInfowindow(marker, title) {
                var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';

                infowindow.setContent(content);
                infowindow.open(map, marker);
            }

            // 검색결과 목록의 자식 Element를 제거하는 함수입니다
            function removeAllChildNods(el) {
                while (el.hasChildNodes()) {
                    el.removeChild (el.lastChild);
                }
            }

            // 지도를 클릭한 위치에 표출할 마커입니다
            var marker = new kakao.maps.Marker({
                // 지도 중심좌표에 마커를 생성합니다
                position: map.getCenter()
            });
            // 지도에 마커를 표시합니다
            marker.setMap(map);

            // 지도에 클릭 이벤트를 등록합니다
            // 지도를 클릭하면 마지막 파라미터로 넘어온 함수를 호출합니다
                kakao.maps.event.addListener(map, 'click', function(mouseEvent) {

                // 클릭한 위도, 경도 정보를 가져옵니다
                var latlng = mouseEvent.latLng;

                // 마커 위치를 클릭한 위치로 옮깁니다
                marker.setPosition(latlng);



                document.getElementById("lat").value = latlng.getLat();
                document.getElementById("lng").value = latlng.getLng();
            });

        </script>
    </div>
</div>

{{>layout/footer}}